version: 2.1

orbs:
#how to integrate slack
#https://circleci.com/developer/orbs/orb/circleci/slack#jobs-on-hold
  slack: circleci/slack@4.12.1


commands:
  notify_on_failure:
    steps:
      - slack/notify:
            event: fail
            channel: fwd-cicd
            template: basic_fail_1
  install_awscli:
    description: Install AWS Cli v2
    steps:
      - run:
          name: Install aws cli v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  install_ansible:
    description: Install ansible 
    steps:
      - run:
          name: Install ansible 
          command: |
             sudo apt update
             sudo apt install software-properties-common -y
             sudo add-apt-repository --yes --update ppa:ansible/ansible
             sudo apt install ansible -y
  
  install_nodejs:
    description: Install Node.js 13
    steps:
      - run:
          name: Install Node.js 13
          command: |
              curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
              sudo apt-get install -y nodejs

              sudo npm install --global n
              sudo n 13.8.0

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>
            aws s3 rm s3://udapeople-<< parameters.Workflow_ID >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}    
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/${KVDB_BUKET}/migration_<< parameters.Workflow_ID >>)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-dependences]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-dependences
      - notify_on_failure

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-dependences]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-dependences
      - notify_on_failure

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-dependences]
      - run:
          name: front-end unit test
          command: |
            cd frontend
            npm install
            npm test
      - notify_on_failure        
                
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-dependences]
      - run:
          name: back-end unit test
          command: |
            cd backend
            npm install
            npm test
      - notify_on_failure
            
  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-dependences]
      - run:
          name: front-end scan
          command: |
            cd frontend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
      - notify_on_failure

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-dependences]
      - run:
          name: back-end scan
          command: |
            cd backend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
      - notify_on_failure

  notify_on_success: 
    docker:
        - image: 'cimg/base:stable'
    steps:
      - slack/notify:
            event: pass
            channel: fwd-cicd
            template: success_tagged_deploy_1       

  deploy-infrastructure:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - checkout
      - install_awscli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
               --template-file .circleci/files/backend.yml \
               --tags project=udapeople \
               --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
               --template-file .circleci/files/frontend.yml \
               --tags project=udapeople \
               --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
                 --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                 --query 'Reservations[*].Instances[*].PublicIpAddress' \
                 --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      
      - destroy-environment    

  configure-infrastructure:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - checkout
      - install_ansible
      - add_ssh_keys:
          fingerprints: ["91:0e:c2:8d:a0:e8:41:26:f2:81:58:a5:4b:de:3b:81"]
      - attach_workspace:
          at: ~/
      # - run:
      #     name: Install dependencies
      #     command: |
      #       # Your code here
      #       exit 1
      # - run:
      #     name: Install dependencies
      #     command: npm install
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure    
      - destroy-environment     

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: npm install
      - install_awscli
      - run:
          name: Run migrations
          when: always
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Check migration results
          command: |
            cd backend
            # cat ~/project/backend/migrations_dump.txt
            # if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            if grep -q "has been executed successfully." migrations_dump.txt
            then
              echo "migrations success"
              echo "workflowid=${CIRCLE_WORKFLOW_ID:0:7}"
              # curl -d '1' https://kvdb.io/${KVDB_BUKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi
          # command: |
          #   if [ $? -eq 0 ] && grep -q "Schema successfully updated" ~/project/backend/migrations_dump.txt; then
          #     echo "Migration was successful and schema was updated"
          #   else
          #     echo "Migration failed or schema was not updated"
          #     echo "Reasons:"
          #     cat ~/project/backend/migrations_dump.txt
          #     exit 1
          #   fi
          # command: |
          #   if [ $? -eq 0 ] && grep -q "Schema successfully updated" ~/project/backend/migrations_dump.txt; then
          #     echo "Migration was successful and schema was updated"
          #   else
          #     echo "Migration failed or schema was not updated"
          #     echo "Reasons:"
          #     cat ~/project/backend/migrations_dump.txt
          #     exit 1
          #   fi
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              echo "....Sending migration results to kvdb.io/${KVDB_BUKET}"
              curl -d '1' https://kvdb.io/${KVDB_BUKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi
      - destroy-environment     
      - revert-migrations

  deploy-frontend:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: [frontend-dependences]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            export API_URL="http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
            echo "${API_URL}"
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure 
      - destroy-environment     
      - revert-migrations     
                    
  deploy-backend:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - install_nodejs
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["91:0e:c2:8d:a0:e8:41:26:f2:81:58:a5:4b:de:3b:81"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-dependences]
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install

      - run:
          name: Package Backend
          command: |
              cd backend
              npm run build
              tar -czf artifact.tar.gz dist/* package*

              cd ..
              cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files/
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*{.ts,.js}

            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure  
      - destroy-environment     
      - revert-migrations  

  smoke-test:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      # - run:
      #     name: Install dependencies
      #     command: |
      #       # your code here
      # - run:
      #     name: Get backend url
      #     command: |
      #       # your code here
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            export API_URL="http://${BACKEND_PUBLIC_IP}:3030"
            echo "API_URL=${API_URL}"
            if curl -s $API_URL/api/status | grep "ok"
            then 
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            FRONTEND_WEBSITE=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com
            if curl -s $FRONTEND_WEBSITE | grep "Welcome"
            then 
              exit 0
            else
              exit 1
            fi
      # Here's where you will add some code to rollback on failure  
      - destroy-environment     
      - revert-migrations  
  cloudfront-update:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - checkout
      - install_awscli
      - install_nodejs

      - run:
          name: Save old workflow id to kvdb.io
          command: |
                  set -x
                  OLD_WORKFLOW_ID=$(aws cloudformation \
                      list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                      --no-paginate --output text)
                  echo "Old workflow ID: $OLD_WORKFLOW_ID"
                  
                  if [ -z "$OLD_WORKFLOW_ID" ]; then
                    echo "Error: OLD_WORKFLOW_ID is empty"
                    exit 1
                  fi
                  
                  # Check if the key already exists
                  RESPONSE=$(curl -I https://kvdb.io/${KVDB_BUKET}/old_workflow_id 2>/dev/null | head -n 1 | cut -d$' ' -f2)
                  
                  # If key exists, update its value
                  if [[ $RESPONSE -eq 200 ]]; then
                      curl -X PUT -d "${OLD_WORKFLOW_ID}" https://kvdb.io/${KVDB_BUKET}/old_workflow_id
                      echo "Value updated in kvdb.io: ${OLD_WORKFLOW_ID}"
                  # If key does not exist, create it with the value
                  else
                      curl -d "${OLD_WORKFLOW_ID}" https://kvdb.io/${KVDB_BUKET}/old_workflow_id
                      echo "Value saved to kvdb.io: ${OLD_WORKFLOW_ID}"
                  fi
      - run:
          name: Update cloudfront distribution
          command: |
              aws cloudformation deploy \
                --template-file .circleci/files/cloudfront.yml \
                --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
                --stack-name InitialStack
      # Here's where you will add some code to rollback on failure  
      - destroy-environment     
      - revert-migrations  
 #   cleanup:
 #       docker:
 #         # Docker image here
 #       steps:
 #         # Checkout code from git
 #         - run:
 #             name: Get old stack workflow id
 #             command: |
 #               # your code here
 #               export OldWorkflowID="the id here"
 #               export STACKS=[] #put the list of stacks here
 #         - run:
 #             name: Remove old stacks and files
 #             command: |
 #               if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
 #               then
 #                 # your code here
 #               fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - notify_on_success:
          requires:
            - test-frontend
            - test-backend
            - scan-frontend
            - scan-backend

      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
     